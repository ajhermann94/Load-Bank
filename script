document.getElementById('configForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    // Get user inputs
    const numLineups = parseInt(document.getElementById('numLineups').value);
    const numReserve = parseInt(document.getElementById('numReserve').value);
    const stsPerLineup = parseInt(document.getElementById('stsPerLineup').value);
    const buswaysPerSTS = parseInt(document.getElementById('buswaysPerSTS').value);
    const upsCapacity = parseInt(document.getElementById('upsCapacity').value);
    const stsCapacity = parseInt(document.getElementById('stsCapacity').value);
    const buswayCapacity = parseInt(document.getElementById('buswayCapacity').value);
    const minLoad = parseInt(document.getElementById('minLoad').value) / 100;
    const maxLoad = parseInt(document.getElementById('maxLoad').value) / 100;
    const phaseHours = parseInt(document.getElementById('phaseHours').value);

    // Generate equipment
    const lineups = [];
    for (let i = 1; i <= numLineups; i++) lineups.push(`L${i}`);
    for (let i = 1; i <= numReserve; i++) lineups.push(`LR${i}`);
    
    const equipment = [];
    lineups.forEach(lineup => {
        const ups = `${lineup}-UPS`;
        for (let s = 1; s <= stsPerLineup; s++) {
            const sts = `${lineup}-STS${s}`;
            for (let b = 1; b <= buswaysPerSTS; b++) {
                equipment.push({
                    Lineup: lineup,
                    UPS: ups,
                    STS: sts,
                    Busway: `${sts}-B${b}`
                });
            }
        }
    });

    // Calculate loads
    const minUPSLoad = upsCapacity * minLoad;
    const midUPSLoad = upsCapacity * (minLoad + (maxLoad - minLoad) / 2); // Middle point
    const maxUPSLoad = upsCapacity * maxLoad;
    const phaseLoads = [minUPSLoad, midUPSLoad, maxUPSLoad];

    const loads = equipment.map(item => {
        const load = { ...item };
        const stsIndex = parseInt(item.STS.match(/\d+$/)[0]) - 1;
        const buswayIndex = parseInt(item.Busway.match(/\d+$/)[0]) - 1;

        // Phase 1: Min load, 1 STS
        load.Phase_1_UPS = stsIndex === 0 ? minUPSLoad : 0;
        load.Phase_1_STS = stsIndex === 0 ? stsCapacity : 0;
        load.Phase_1_Busway = stsIndex === 0 && buswayIndex < 3 ? (buswayIndex < 2 ? buswayCapacity : buswayCapacity / 2) : 0;

        // Phase 2: Mid load, 2 STSs
        load.Phase_2_UPS = stsIndex === 0 ? midUPSLoad : 0;
        load.Phase_2_STS = stsIndex < 2 ? stsCapacity : 0;
        load.Phase_2_Busway = stsIndex < 2 && buswayIndex < 3 ? (buswayIndex < 2 ? buswayCapacity : buswayCapacity / 2) : 0;

        // Phase 3: Max load, rotate STSs
        const intervals = Math.ceil(stsPerLineup / (maxUPSLoad / stsCapacity));
        for (let i = 0; i < intervals; i++) {
            const activeSTSs = Array.from({ length: Math.min(stsPerLineup, maxUPSLoad / stsCapacity) }, (_, j) => (j + i) % stsPerLineup);
            load[`Phase_3_Interval_${i+1}_UPS`] = stsIndex === 0 ? maxUPSLoad : 0;
            load[`Phase_3_Interval_${i+1}_STS`] = activeSTSs.includes(stsIndex) ? stsCapacity : 0;
            load[`Phase_3_Interval_${i+1}_Busway`] = activeSTSs.includes(stsIndex) && buswayIndex < 3 ? (buswayIndex < 2 ? buswayCapacity : buswayCapacity / 2) : 0;
        }
        return load;
    });

    // Display table
    let html = '<table><tr><th>Lineup</th><th>UPS</th><th>STS</th><th>Busway</th>';
    html += '<th>P1 UPS</th><th>P1 STS</th><th>P1 Bus</th>';
    html += '<th>P2 UPS</th><th>P2 STS</th><th>P2 Bus</th>';
    for (let i = 1; i <= intervals; i++) {
        html += `<th>P3 I${i} UPS</th><th>P3 I${i} STS</th><th>P3 I${i} Bus</th>`;
    }
    html += '</tr>';
    loads.forEach(load => {
        html += `<tr><td>${load.Lineup}</td><td>${load.UPS}</td><td>${load.STS}</td><td>${load.Busway}</td>`;
        html += `<td>${load.Phase_1_UPS}</td><td>${load.Phase_1_STS}</td><td>${load.Phase_1_Busway}</td>`;
        html += `<td>${load.Phase_2_UPS}</td><td>${load.Phase_2_STS}</td><td>${load.Phase_2_Busway}</td>`;
        for (let i = 1; i <= intervals; i++) {
            html += `<td>${load[`Phase_3_Interval_${i}_UPS`]}</td><td>${load[`Phase_3_Interval_${i}_STS`]}</td><td>${load[`Phase_3_Interval_${i}_Busway`]}</td>`;
        }
        html += '</tr>';
    });
    html += '</table>';
    document.getElementById('output').innerHTML = html;
    document.getElementById('downloadBtn').style.display = 'block';
    window.loads = loads; // Store for CSV download
    window.intervals = intervals;
});

function downloadCSV() {
    const loads = window.loads;
    const intervals = window.intervals;
    let csv = 'Lineup,UPS,STS,Busway,Phase_1_UPS,Phase_1_STS,Phase_1_Busway,Phase_2_UPS,Phase_2_STS,Phase_2_Busway';
    for (let i = 1; i <= intervals; i++) {
        csv += `,Phase_3_Interval_${i}_UPS,Phase_3_Interval_${i}_STS,Phase_3_Interval_${i}_Busway`;
    }
    csv += '\n';
    loads.forEach(load => {
        csv += `${load.Lineup},${load.UPS},${load.STS},${load.Busway},${load.Phase_1_UPS},${load.Phase_1_STS},${load.Phase_1_Busway},${load.Phase_2_UPS},${load.Phase_2_STS},${load.Phase_2_Busway}`;
        for (let i = 1; i <= intervals; i++) {
            csv += `,${load[`Phase_3_Interval_${i}_UPS`]},${load[`Phase_3_Interval_${i}_STS`]},${load[`Phase_3_Interval_${i}_Busway`]}`;
        }
        csv += '\n';
    });
    const blob = new Blob([csv], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'UPS_Load_Sequence.csv';
    a.click();
}
